name: Build

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '14.2'
    
    - name: Run Tests
      run: |
        # Build and test with detailed output
        swift test --enable-test-discovery --enable-code-coverage --verbose
        
        # Exit if tests fail
        if [ $? -ne 0 ]; then
          echo "Tests failed. Stopping release process."
          exit 1
        fi

  build:
    name: Build App
    needs: test  # This ensures tests must pass before building
    runs-on: macos-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '14.2'
    
    - name: Build App
      run: |
        # Clean any previous builds
        rm -rf .build
        rm -rf MacAITextImprover.app
        
        # Build the project
        swift build -c release
        
        # Create app bundle
        mkdir -p MacAITextImprover.app/Contents/MacOS MacAITextImprover.app/Contents/Resources
        cp .build/release/MacAITextImprover MacAITextImprover.app/Contents/MacOS/
        cp MacAITextImprover.app/Contents/Info.plist MacAITextImprover.app/Contents/
        chmod +x MacAITextImprover.app/Contents/MacOS/MacAITextImprover
        
        # Verify app bundle
        if [ ! -x "MacAITextImprover.app/Contents/MacOS/MacAITextImprover" ]; then
          echo "App bundle creation failed"
          exit 1
        fi
        
        echo "App bundle contents:"
        ls -R MacAITextImprover.app
    
    - name: Create DMG
      id: create_dmg
      run: |
        # Get version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        DMG_NAME="MacAITextImprover-${VERSION}.dmg"
        
        echo "Creating DMG with version: $VERSION"
        echo "DMG name will be: $DMG_NAME"
        
        # Create DMG
        hdiutil create -volname "MacAITextImprover" \
                      -srcfolder MacAITextImprover.app \
                      -ov -format UDZO \
                      "$DMG_NAME"
        
        # Verify DMG was created
        if [ ! -f "$DMG_NAME" ]; then
          echo "DMG creation failed"
          exit 1
        fi
        
        echo "Created DMG: $DMG_NAME"
        ls -la "$DMG_NAME"
        
        # Store DMG name for later use
        echo "dmg_name=$DMG_NAME" >> $GITHUB_OUTPUT
    
    - name: Prepare Release Notes
      id: release_notes
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "Extracting release notes for version $VERSION"
        
        # Extract section between current version header and next version header
        awk "/## \[$VERSION\]/,/## \[/" CHANGELOG.md | sed '$d' > release_notes.md
        
        # Verify release notes were extracted
        if [ ! -s release_notes.md ]; then
          echo "Failed to extract release notes for version $VERSION"
          exit 1
        fi
        
        echo "Release notes content:"
        cat release_notes.md
    
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: "Version ${{ github.ref_name }}"
        body_path: release_notes.md
        draft: true
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.create_dmg.outputs.dmg_name }}
        asset_name: ${{ steps.create_dmg.outputs.dmg_name }}
        asset_content_type: application/x-apple-diskimage