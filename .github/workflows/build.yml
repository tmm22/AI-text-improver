name: Build

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '14.2'
    
    - name: Run Tests
      run: |
        # Build and test with detailed output
        swift test --enable-test-discovery --enable-code-coverage --verbose
        
    - name: Generate Coverage Report
      run: |
        xcrun llvm-cov export -format="lcov" .build/debug/MacAITextImproverPackageTests.xctest/Contents/MacOS/MacAITextImproverPackageTests -instr-profile .build/debug/codecov/default.profdata > coverage.lcov
    
    - name: Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        file: coverage.lcov
        fail_ci_if_error: true

  build:
    name: Build App
    needs: test
    runs-on: macos-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '14.2'
    
    - name: Get Version
      id: get_version
      run: |
        # Get version from tag (remove 'v' prefix)
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Verify Version and Changelog
      run: |
        # Check if version matches VERSION file
        FILE_VERSION=$(cat VERSION)
        if [ "$VERSION" != "$FILE_VERSION" ]; then
          echo "Version mismatch: Tag version ($VERSION) doesn't match VERSION file ($FILE_VERSION)"
          exit 1
        fi
        
        # Check if CHANGELOG.md exists and contains the current version
        if ! grep -q "\[$VERSION\]" CHANGELOG.md; then
          echo "CHANGELOG.md does not contain entry for version $VERSION"
          exit 1
        fi
    
    - name: Build App
      run: |
        # Clean any previous builds
        rm -rf .build
        rm -rf MacAITextImprover.app
        
        # Build the project
        swift build -c release
        
        # Create app bundle
        APP_NAME="MacAITextImprover"
        APP_DIR="$APP_NAME.app"
        CONTENTS_DIR="$APP_DIR/Contents"
        MACOS_DIR="$CONTENTS_DIR/MacOS"
        RESOURCES_DIR="$CONTENTS_DIR/Resources"
        
        mkdir -p "$MACOS_DIR" "$RESOURCES_DIR"
        cp ".build/release/$APP_NAME" "$MACOS_DIR/"
        cp MacAITextImprover.app/Contents/Info.plist "$CONTENTS_DIR/"
    
    - name: Verify App Bundle
      run: |
        APP_NAME="MacAITextImprover"
        
        # Check executable
        if [ ! -x "$APP_NAME.app/Contents/MacOS/$APP_NAME" ]; then
          echo "Executable is missing or not executable"
          exit 1
        fi
        
        # Check Info.plist
        if [ ! -f "$APP_NAME.app/Contents/Info.plist" ]; then
          echo "Info.plist is missing"
          exit 1
        fi
    
    - name: Create DMG
      run: |
        APP_NAME="MacAITextImprover"
        DMG_NAME="$APP_NAME-${VERSION}.dmg"
        
        # Create DMG for Intel
        hdiutil create -volname "$APP_NAME" \
                      -srcfolder "$APP_NAME.app" \
                      -ov -format UDZO \
                      "$DMG_NAME"
        
        # Verify DMG was created
        if [ ! -f "$DMG_NAME" ]; then
          echo "DMG creation failed"
          exit 1
        fi
        
        echo "Created DMG: $DMG_NAME"
        ls -la "$DMG_NAME"
    
    - name: Prepare Release Notes
      run: |
        # Extract the current version's changelog entry
        awk "/## \[$VERSION\]/{p=1;print;next} /## \[/{p=0} p" CHANGELOG.md > RELEASE_NOTES.md
    
    - name: Release
      uses: ncipollo/release-action@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        name: "Version ${{ env.VERSION }}"
        artifacts: "MacAITextImprover-*.dmg"
        bodyFile: "RELEASE_NOTES.md"
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: true