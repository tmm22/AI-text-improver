name: Build

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '14.2'
    
    - name: Run Tests
      run: |
        swift test --enable-test-discovery --enable-code-coverage --verbose

  build:
    name: Build App
    needs: test
    runs-on: macos-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '14.2'
    
    - name: Build Project
      run: |
        # Clean and build
        rm -rf .build MacAITextImprover.app MacAITextImprover-*.dmg
        swift build -c release
        
        # Debug output
        echo "Build output:"
        ls -la .build/release/
    
    - name: Create App Bundle
      run: |
        # Create bundle structure
        mkdir -p MacAITextImprover.app/Contents/{MacOS,Resources}
        cp .build/release/MacAITextImprover MacAITextImprover.app/Contents/MacOS/
        chmod +x MacAITextImprover.app/Contents/MacOS/MacAITextImprover
        
        # Create Info.plist
        VERSION=${GITHUB_REF#refs/tags/v}
        cat > MacAITextImprover.app/Contents/Info.plist << EOL
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundlePackageType</key>
    <string>APPL</string>
    <key>CFBundleExecutable</key>
    <string>MacAITextImprover</string>
    <key>CFBundleIdentifier</key>
    <string>com.example.macaitextimprover</string>
    <key>CFBundleName</key>
    <string>Mac AI Text Improver</string>
    <key>CFBundleShortVersionString</key>
    <string>$VERSION</string>
    <key>CFBundleVersion</key>
    <string>1</string>
    <key>LSMinimumSystemVersion</key>
    <string>12.0</string>
    <key>NSHighResolutionCapable</key>
    <true/>
    <key>LSApplicationCategoryType</key>
    <string>public.app-category.productivity</string>
    <key>NSMicrophoneUsageDescription</key>
    <string>We need access to your microphone for speech recognition.</string>
    <key>NSSpeechRecognitionUsageDescription</key>
    <string>We need speech recognition permission to convert your speech to text.</string>
</dict>
</plist>
EOL
        
        # Verify bundle
        echo "App bundle contents:"
        ls -R MacAITextImprover.app
    
    - name: Create DMG
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        DMG_NAME="MacAITextImprover-${VERSION}.dmg"
        
        echo "Creating DMG: $DMG_NAME"
        hdiutil create -volname "MacAITextImprover" \
                      -srcfolder MacAITextImprover.app \
                      -ov -format UDZO \
                      "$DMG_NAME"
        
        # Verify DMG
        if [ ! -f "$DMG_NAME" ]; then
          echo "DMG creation failed"
          exit 1
        fi
        
        echo "DMG created successfully:"
        ls -la "$DMG_NAME"
        
        # Move DMG to artifacts directory
        mkdir -p artifacts
        mv "$DMG_NAME" artifacts/
        
        echo "Artifacts directory contents:"
        ls -la artifacts/
    
    - name: Prepare Release Notes
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "Extracting release notes for version $VERSION"
        
        mkdir -p artifacts
        awk "/## \[$VERSION\]/,/## \[/" CHANGELOG.md | sed '$d' > artifacts/release_notes.md
        
        echo "Release notes content:"
        cat artifacts/release_notes.md
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts
        path: artifacts/
        if-no-files-found: error
    
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        DMG_NAME="artifacts/MacAITextImprover-${VERSION}.dmg"
        
        # Create release using gh CLI
        gh release create "v$VERSION" \
          --title "Version $VERSION" \
          --notes-file artifacts/release_notes.md \
          --draft \
          "$DMG_NAME"