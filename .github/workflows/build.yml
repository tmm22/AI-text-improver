name: Release Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: read

jobs:
  verify:
    name: Verify Tests
    runs-on: macos-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Get Version
        id: get_version
        run: |
          # Extract version from tag or VERSION file
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(cat VERSION)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"
      
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '14.2'
      
      - name: Run Tests
        run: |
          echo "Running tests..."
          swift test --enable-test-discovery --enable-code-coverage --verbose
          
          if [ $? -ne 0 ]; then
            echo "Tests failed! Aborting release."
            exit 1
          fi
          echo "All tests passed successfully."

  build:
    name: Build App
    needs: verify
    runs-on: macos-latest
    env:
      VERSION: ${{ needs.verify.outputs.version }}
    outputs:
      dmg_path: ${{ steps.create_dmg.outputs.dmg_path }}
      notes_path: ${{ steps.prepare_notes.outputs.notes_path }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '14.2'
      
      - name: Clean Environment
        run: |
          echo "Cleaning build environment..."
          rm -rf .build MacAITextImprover.app *.dmg artifacts
          mkdir -p artifacts
      
      - name: Build Project
        run: |
          echo "Building project version $VERSION..."
          swift build -c release
          
          echo "Build artifacts:"
          ls -la .build/release/
      
      - name: Create App Bundle
        run: |
          echo "Creating app bundle..."
          mkdir -p MacAITextImprover.app/Contents/{MacOS,Resources}
          cp .build/release/MacAITextImprover MacAITextImprover.app/Contents/MacOS/
          chmod +x MacAITextImprover.app/Contents/MacOS/MacAITextImprover
          
          echo "Creating Info.plist..."
          cat > MacAITextImprover.app/Contents/Info.plist << EOL
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundlePackageType</key>
    <string>APPL</string>
    <key>CFBundleExecutable</key>
    <string>MacAITextImprover</string>
    <key>CFBundleIdentifier</key>
    <string>com.example.macaitextimprover</string>
    <key>CFBundleName</key>
    <string>Mac AI Text Improver</string>
    <key>CFBundleShortVersionString</key>
    <string>${VERSION}</string>
    <key>CFBundleVersion</key>
    <string>1</string>
    <key>LSMinimumSystemVersion</key>
    <string>12.0</string>
    <key>NSHighResolutionCapable</key>
    <true/>
    <key>LSApplicationCategoryType</key>
    <string>public.app-category.productivity</string>
    <key>NSMicrophoneUsageDescription</key>
    <string>We need access to your microphone for speech recognition.</string>
    <key>NSSpeechRecognitionUsageDescription</key>
    <string>We need speech recognition permission to convert your speech to text.</string>
</dict>
</plist>
EOL
          
          echo "App bundle contents:"
          ls -R MacAITextImprover.app
      
      - name: Create DMG
        id: create_dmg
        run: |
          echo "Creating DMG for version $VERSION..."
          DMG_NAME="MacAITextImprover-${VERSION}.dmg"
          
          # Create DMG
          hdiutil create -volname "MacAITextImprover" \
                        -srcfolder MacAITextImprover.app \
                        -ov -format UDZO \
                        "artifacts/$DMG_NAME"
          
          # Verify DMG
          if [ ! -f "artifacts/$DMG_NAME" ]; then
            echo "DMG creation failed!"
            exit 1
          fi
          
          echo "DMG created successfully:"
          ls -la artifacts/
          
          # Set output
          echo "dmg_path=artifacts/$DMG_NAME" >> $GITHUB_OUTPUT
          
          # Debug: Show DMG contents
          hdiutil attach "artifacts/$DMG_NAME"
          ls -la /Volumes/MacAITextImprover/
          hdiutil detach /Volumes/MacAITextImprover/
      
      - name: Prepare Release Notes
        id: prepare_notes
        run: |
          echo "Preparing release notes for version $VERSION..."
          
          # Extract release notes
          awk "/## \[$VERSION\]/,/## \[/" CHANGELOG.md | sed '$d' > artifacts/release_notes.md
          
          if [ ! -s artifacts/release_notes.md ]; then
            echo "No release notes found for version $VERSION!"
            exit 1
          fi
          
          echo "Release notes content:"
          cat artifacts/release_notes.md
          
          # Set output
          echo "notes_path=artifacts/release_notes.md" >> $GITHUB_OUTPUT
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: artifacts/
          if-no-files-found: error
          retention-days: 1

  release:
    name: Create Release
    needs: [verify, build]
    runs-on: macos-latest
    env:
      VERSION: ${{ needs.verify.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-artifacts
          path: artifacts
      
      - name: Verify Artifacts
        run: |
          echo "Verifying release artifacts..."
          ls -la artifacts/
          
          # Check DMG exists
          if [ ! -f "artifacts/MacAITextImprover-${VERSION}.dmg" ]; then
            echo "DMG file missing!"
            exit 1
          fi
          
          # Check release notes exist
          if [ ! -f "artifacts/release_notes.md" ]; then
            echo "Release notes missing!"
            exit 1
          fi
          
          # Debug: Show DMG contents
          hdiutil attach "artifacts/MacAITextImprover-${VERSION}.dmg"
          ls -la /Volumes/MacAITextImprover/
          hdiutil detach /Volumes/MacAITextImprover/
          
          echo "Release notes content:"
          cat artifacts/release_notes.md
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: artifacts/MacAITextImprover-${{ env.VERSION }}.dmg
          body_path: artifacts/release_notes.md
          name: "Version ${{ env.VERSION }}"
          tag_name: v${{ env.VERSION }}
          draft: true
          fail_on_unmatched_files: true