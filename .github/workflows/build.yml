name: Build

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '14.2'
    
    - name: Run Tests
      run: |
        # Build and test with detailed output
        swift test --enable-test-discovery --enable-code-coverage --verbose
        
        # Exit if tests fail
        if [ $? -ne 0 ]; then
          echo "Tests failed. Stopping release process."
          exit 1
        fi

  build:
    name: Build App
    needs: test  # This ensures tests must pass before building
    runs-on: macos-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '14.2'
    
    - name: Build App
      run: |
        # Clean any previous builds
        rm -rf .build
        rm -rf MacAITextImprover.app
        
        # Build the project
        swift build -c release
        
        # Create app bundle
        APP_NAME="MacAITextImprover"
        APP_DIR="$APP_NAME.app"
        CONTENTS_DIR="$APP_DIR/Contents"
        MACOS_DIR="$CONTENTS_DIR/MacOS"
        RESOURCES_DIR="$CONTENTS_DIR/Resources"
        
        mkdir -p "$MACOS_DIR" "$RESOURCES_DIR"
        cp ".build/release/$APP_NAME" "$MACOS_DIR/"
        cp MacAITextImprover.app/Contents/Info.plist "$CONTENTS_DIR/"
        chmod +x "$MACOS_DIR/$APP_NAME"
        
        # Verify app bundle
        if [ ! -x "$MACOS_DIR/$APP_NAME" ]; then
          echo "App bundle creation failed"
          exit 1
        fi
        
        echo "App bundle contents:"
        ls -R "$APP_DIR"
    
    - name: Create DMG
      id: create_dmg
      run: |
        # Get version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        APP_NAME="MacAITextImprover"
        DMG_NAME="$APP_NAME-${VERSION}.dmg"
        
        echo "Creating DMG with version: $VERSION"
        echo "DMG name will be: $DMG_NAME"
        
        # Create artifacts directory
        mkdir -p artifacts
        
        # List contents before DMG creation
        echo "Contents before DMG creation:"
        ls -la
        
        # Create DMG
        hdiutil create -volname "$APP_NAME" \
                      -srcfolder "$APP_NAME.app" \
                      -ov -format UDZO \
                      "artifacts/$DMG_NAME"
        
        # Verify DMG was created
        if [ ! -f "artifacts/$DMG_NAME" ]; then
          echo "DMG creation failed"
          exit 1
        fi
        
        echo "Created DMG: artifacts/$DMG_NAME"
        ls -la artifacts/
        
        # Store DMG path for later use
        echo "DMG_PATH=artifacts/$DMG_NAME" >> $GITHUB_ENV
        echo "DMG_NAME=$DMG_NAME" >> $GITHUB_ENV
    
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: dmg-artifact
        path: artifacts/*.dmg
        if-no-files-found: error
    
    - name: Prepare Release Notes
      id: release_notes
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "Extracting release notes for version $VERSION"
        
        # Extract section between current version header and next version header
        awk "/## \[$VERSION\]/,/## \[/" CHANGELOG.md | sed '$d' > artifacts/release_notes.md
        
        # Verify release notes were extracted
        if [ ! -s artifacts/release_notes.md ]; then
          echo "Failed to extract release notes for version $VERSION"
          exit 1
        fi
        
        echo "Release notes content:"
        cat artifacts/release_notes.md
    
    - name: Create Release
      uses: ncipollo/release-action@v1.13.0
      with:
        artifacts: "artifacts/*.dmg"
        bodyFile: "artifacts/release_notes.md"
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: true
        name: "Version ${{ github.ref_name }}"
        allowUpdates: true