name: Build

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '14.2'
    
    - name: Run Tests
      run: |
        # Build and test with detailed output
        swift test --enable-test-discovery --enable-code-coverage --verbose
        
        # Exit if tests fail
        if [ $? -ne 0 ]; then
          echo "Tests failed. Stopping release process."
          exit 1
        fi

  build:
    name: Build App
    needs: test  # This ensures tests must pass before building
    runs-on: macos-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Important for getting all tags and history
    
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '14.2'
    
    - name: Build App
      run: |
        # Debug: Show environment
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        
        # Clean any previous builds
        rm -rf .build
        rm -rf MacAITextImprover.app
        
        # Build the project
        swift build -c release
        
        # Create app bundle
        mkdir -p MacAITextImprover.app/Contents/MacOS MacAITextImprover.app/Contents/Resources
        cp .build/release/MacAITextImprover MacAITextImprover.app/Contents/MacOS/
        cp MacAITextImprover.app/Contents/Info.plist MacAITextImprover.app/Contents/
        chmod +x MacAITextImprover.app/Contents/MacOS/MacAITextImprover
        
        # Verify app bundle
        if [ ! -x "MacAITextImprover.app/Contents/MacOS/MacAITextImprover" ]; then
          echo "App bundle creation failed"
          exit 1
        fi
        
        echo "App bundle contents:"
        ls -R MacAITextImprover.app
    
    - name: Create DMG
      id: create_dmg
      run: |
        # Debug: Show git info
        echo "Git ref: $GITHUB_REF"
        echo "Git ref name: $GITHUB_REF_NAME"
        
        # Get version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        DMG_NAME="MacAITextImprover-${VERSION}.dmg"
        
        echo "Creating DMG with version: $VERSION"
        echo "DMG name will be: $DMG_NAME"
        
        # Create artifacts directory
        mkdir -p artifacts
        
        # Create DMG
        hdiutil create -volname "MacAITextImprover" \
                      -srcfolder MacAITextImprover.app \
                      -ov -format UDZO \
                      "artifacts/$DMG_NAME"
        
        # Verify DMG was created
        if [ ! -f "artifacts/$DMG_NAME" ]; then
          echo "DMG creation failed"
          exit 1
        fi
        
        echo "Created DMG: artifacts/$DMG_NAME"
        ls -la artifacts/
        
        # Store DMG info for later use
        echo "dmg_path=artifacts/$DMG_NAME" >> $GITHUB_OUTPUT
        echo "dmg_name=$DMG_NAME" >> $GITHUB_OUTPUT
    
    - name: Prepare Release Notes
      id: release_notes
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "Preparing release notes for version: $VERSION"
        
        # Debug: Show CHANGELOG.md contents
        echo "CHANGELOG.md contents:"
        cat CHANGELOG.md
        
        # Create release notes
        echo "# Release v$VERSION" > artifacts/release_notes.md
        echo "" >> artifacts/release_notes.md
        
        # Extract section between current version header and next version header
        awk "/## \[$VERSION\]/,/## \[/" CHANGELOG.md | sed '$d' >> artifacts/release_notes.md
        
        # Verify release notes were extracted
        if [ ! -s artifacts/release_notes.md ]; then
          echo "Failed to extract release notes for version $VERSION"
          exit 1
        fi
        
        echo "Generated release notes:"
        cat artifacts/release_notes.md
        
        # Store release notes path
        echo "notes_path=artifacts/release_notes.md" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/*.dmg
        body_path: ${{ steps.release_notes.outputs.notes_path }}
        name: "Version ${{ github.ref_name }}"
        tag_name: ${{ github.ref }}
        draft: true
        fail_on_unmatched_files: true