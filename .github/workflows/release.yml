name: Create Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  test-and-build:
    name: Test and Build
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]
        include:
          - arch: x86_64
            name: Intel
          - arch: arm64
            name: Apple Silicon
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '14.2'
    
    # Run Tests
    - name: Run Feature Tests
      run: |
        swift test --filter "MacAITextImproverTests.WritingStyleTests"
        swift test --filter "MacAITextImproverTests.AIServiceTests"
        swift test --filter "MacAITextImproverTests.SpeechRecognitionTests"
        swift test --filter "MacAITextImproverTests.TextToSpeechTests"
    
    - name: Run UI Tests
      run: |
        mkdir -p UIBaselines
        swift test --filter "MacAITextImproverTests.ContentViewTests"
        swift test --filter "MacAITextImproverTests.UIConsistencyTests"
    
    # Generate Coverage
    - name: Generate Code Coverage
      run: |
        swift test --enable-code-coverage
        xcrun llvm-cov export -format="lcov" \
          .build/debug/MacAITextImproverPackageTests.xctest/Contents/MacOS/MacAITextImproverPackageTests \
          -instr-profile .build/debug/codecov/default.profdata \
          > coverage.lcov
    
    # Build App
    - name: Build for ${{ matrix.arch }}
      run: |
        # Clean any previous builds
        rm -rf .build
        rm -rf MacAITextImprover.app
        
        # Build the project
        arch -${{ matrix.arch }} swift build -c release
        
        # Create app bundle
        APP_NAME="MacAITextImprover"
        APP_DIR="$APP_NAME.app"
        CONTENTS_DIR="$APP_DIR/Contents"
        MACOS_DIR="$CONTENTS_DIR/MacOS"
        RESOURCES_DIR="$CONTENTS_DIR/Resources"
        
        mkdir -p "$MACOS_DIR" "$RESOURCES_DIR"
        cp ".build/release/$APP_NAME" "$MACOS_DIR/"
        cp MacAITextImprover.app/Contents/Info.plist "$CONTENTS_DIR/"
    
    # Create DMG
    - name: Create DMG
      run: |
        APP_NAME="MacAITextImprover"
        hdiutil create -volname "$APP_NAME-${{ matrix.name }}" \
                      -srcfolder "$APP_NAME.app" \
                      -ov -format UDZO \
                      "$APP_NAME-${{ matrix.name }}.dmg"
    
    # Upload Artifacts
    - name: Upload App Bundle
      uses: actions/upload-artifact@v3
      with:
        name: MacAITextImprover-${{ matrix.name }}.app
        path: MacAITextImprover.app
    
    - name: Upload DMG
      uses: actions/upload-artifact@v3
      with:
        name: MacAITextImprover-${{ matrix.name }}.dmg
        path: MacAITextImprover-${{ matrix.name }}.dmg
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.name }}
        path: |
          .build/debug/codecov/
          coverage.lcov
          UIBaselines/
  
  create-release:
    name: Create Release
    needs: test-and-build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    # Download artifacts
    - name: Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    # Generate Release Notes
    - name: Extract Release Notes
      run: |
        # Get version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "Extracting release notes for version $VERSION"
        
        # Ensure CHANGELOG.md exists
        if [ ! -f CHANGELOG.md ]; then
          echo "Error: CHANGELOG.md not found"
          exit 1
        fi
        
        # Extract the section for this version
        sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' > release_notes.md
        
        # Check if we got any content
        if [ ! -s release_notes.md ]; then
          echo "Error: No release notes found for version $VERSION"
          echo "Content of CHANGELOG.md:"
          cat CHANGELOG.md
          exit 1
        fi
        
        echo "Generated release notes:"
        cat release_notes.md
    
    # Create Release
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/MacAITextImprover-Intel.dmg/MacAITextImprover-Intel.dmg
          artifacts/MacAITextImprover-Apple-Silicon.dmg/MacAITextImprover-Apple-Silicon.dmg
        body_path: release_notes.md
        draft: true
        prerelease: false
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}